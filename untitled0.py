# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hopF8kS-pn4-yUa4xODLLd4PQ9z2ZFfn
"""

import sqlite3

'''Создание базы данных и подключение к ней'''

sqlite_connection = sqlite3.connect('database.db')
cursor = sqlite_connection.cursor()
print("База данных создана и успешно подключена к SQLite")

'''Создание таблицы Students'''

cursor.execute('''CREATE TABLE IF NOT EXISTS Students
              (id INTEGER PRIMARY KEY,
              name TEXT,
              surname TEXT,
              age INTEGER,
              city TEXT)''')

'''Создание таблицы Courses'''

cursor.execute('''CREATE TABLE IF NOT EXISTS Courses
              (id INTEGER PRIMARY KEY,
              name TEXT,
              time_start TEXT,
              time_end TEXT)''')

'''Создание таблицы Student_courses'''

cursor.execute('''CREATE TABLE IF NOT EXISTS Student_courses
              (student_id INTEGER,
              course_id INTEGER,
              FOREIGN KEY (student_id) REFERENCES Students(id),
              FOREIGN KEY (course_id) REFERENCES Courses(id))''')

'''Сохранение изменений и закрытие объектов соединения'''

sqlite_connection.commit()
sqlite_connection.close()
print("Соединение с SQLite закрыто")

import sqlite3

'''Создание базы данных и подключение к ней'''

sqlite_connection = sqlite3.connect('database.db')
cursor = sqlite_connection.cursor()
print("База данных создана и успешно подключена к SQLite")

'''Создание таблицы Students'''

cursor.execute('''CREATE TABLE IF NOT EXISTS Students
              (id INTEGER PRIMARY KEY,
              name TEXT,
              surname TEXT,
              age INTEGER,
              city TEXT)''')

'''Создание таблицы Courses'''

cursor.execute('''CREATE TABLE IF NOT EXISTS Courses
              (id INTEGER PRIMARY KEY,
              name TEXT,
              time_start TEXT,
              time_end TEXT)''')

'''Создание таблицы Student_courses'''

cursor.execute('''CREATE TABLE IF NOT EXISTS Student_courses
              (student_id INTEGER,
              course_id INTEGER,
              FOREIGN KEY (student_id) REFERENCES Students(id),
              FOREIGN KEY (course_id) REFERENCES Courses(id))''')

'''Добавление данных в таблицу Courses'''

cursor.execute("INSERT OR IGNORE INTO Courses VALUES (1, 'python', '21.07.21', '21.08.21')")
cursor.execute("INSERT OR IGNORE INTO Courses VALUES (2, 'java', '13.07.21', '16.08.21')")

'''Добавление данных в таблицу Students'''

cursor.execute("INSERT OR IGNORE INTO Students VALUES (1, 'Max', 'Brooks', 24, 'Spb')")
cursor.execute("INSERT OR IGNORE INTO Students VALUES (2, 'John', 'Stones', 15, 'Spb')")
cursor.execute("INSERT OR IGNORE INTO Students VALUES (3, 'Andy', 'Wings', 45, 'Manhester')")
cursor.execute("INSERT OR IGNORE INTO Students VALUES (4, 'Kate', 'Brooks', 34, 'Spb')")

'''Добавление данных в таблицу Student_courses'''

cursor.execute("INSERT OR IGNORE INTO Student_courses VALUES (1, 1)")
cursor.execute("INSERT OR IGNORE INTO Student_courses VALUES (2, 1)")
cursor.execute("INSERT OR IGNORE INTO Student_courses VALUES (3, 1)")
cursor.execute("INSERT OR IGNORE INTO Student_courses VALUES (4, 2)")

'''Сохранение изменений и закрытие объектов соединени'''

sqlite_connection.commit()
sqlite_connection.close()
print("Соединение с SQLite закрыто")

'''Подключение к базе данных'''

sqlite_connection = sqlite3.connect('database.db')
cursor = sqlite_connection.cursor()

'''Запрос, чтобы получить всех студентов старше 30 лет'''

cursor.execute("SELECT * FROM Students WHERE age > 30")
students_over_30 = cursor.fetchall()
print("Студенты старше 30 лет:")
for student in students_over_30:
    print(student)

'''Запрос, чтобы получить всех студентов, которые проходят курс по python'''

cursor.execute("SELECT Students.id, Students.name, Students.surname FROM Students JOIN Student_courses "
               "ON Students.id = Student_courses.student_id "
               "JOIN Courses ON Student_courses.course_id = Courses.id "
               "WHERE Courses.name = 'python'")
python_students = cursor.fetchall()
print("Студенты, проходящие курс по python:")
for student in python_students:
    print(student)

''' Запрос, чтобы получить всех студентов, которые проходят курс по python и из Spb'''

cursor.execute("SELECT Students.id, Students.name, Students.surname FROM Students JOIN Student_courses "
               "ON Students.id = Student_courses.student_id "
               "JOIN Courses ON Student_courses.course_id = Courses.id "
               "WHERE Courses.name = 'python' AND Students.city = 'Spb'")
python_spb_students = cursor.fetchall()
print("Студенты, проходящие курс по python и из Spb:")
for student in python_spb_students:
    print(student)

'''закрытие объектов соединения'''

sqlite_connection.close()

import sqlite3

class Database:
    def __init__(self, db_name):
        '''
        Инициализация основных значений
        :param db_name:  Type is string. Название базы данных
        '''
        self.db_name = db_name
        self.sqlite_connection = None
        self.cursor = None

    def connect(self):
        '''
        Покдлючение к базе и задание курсора
        return: none
        '''
        self.sqlite_connection = sqlite3.connect(self.db_name)
        self.cursor = self.sqlite_connection.cursor()

    def create_tables(self):
        '''
        Функции создания таблиц
        return: none
        '''
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS Students
                              (id INTEGER PRIMARY KEY,
                              name TEXT,
                              surname TEXT,
                              age INTEGER,
                              city TEXT)''')

        self.cursor.execute('''CREATE TABLE IF NOT EXISTS Courses
                              (id INTEGER PRIMARY KEY,
                              name TEXT,
                              time_start TEXT,
                              time_end TEXT)''')

        self.cursor.execute('''CREATE TABLE IF NOT EXISTS Student_courses
                              (student_id INTEGER,
                              course_id INTEGER,
                              FOREIGN KEY (student_id) REFERENCES Students(id),
                              FOREIGN KEY (course_id) REFERENCES Courses(id))''')

    def insert_data(self):
        '''
        Добавление данных в таблицу Courses
        return: none
        '''

        self.cursor.execute("INSERT OR IGNORE INTO Courses VALUES (1, 'python', '21.07.21', '21.08.21')")
        self.cursor.execute("INSERT OR IGNORE INTO Courses VALUES (2, 'java', '13.07.21', '16.08.21')")

        self.cursor.execute("INSERT OR IGNORE INTO Students VALUES (1, 'Max', 'Brooks', 24, 'Spb')")
        self.cursor.execute("INSERT OR IGNORE INTO Students VALUES (2, 'John', 'Stones', 15, 'Spb')")
        self.cursor.execute("INSERT OR IGNORE INTO Students VALUES (3, 'Andy', 'Wings', 45, 'Manhester')")
        self.cursor.execute("INSERT OR IGNORE INTO Students VALUES (4, 'Kate', 'Brooks', 34, 'Spb')")

        self.cursor.execute("INSERT OR IGNORE INTO Student_courses VALUES (1, 1)")
        self.cursor.execute("INSERT OR IGNORE INTO Student_courses VALUES (2, 1)")
        self.cursor.execute("INSERT OR IGNORE INTO Student_courses VALUES (3, 1)")
        self.cursor.execute("INSERT OR IGNORE INTO Student_courses VALUES (4, 2)")

        self.sqlite_connection.commit()

    def get_students_over_30(self):
        '''
        Функция вызова студентов старше 30
        return: студенты старше 30
        '''
        self.cursor.execute("SELECT * FROM Students WHERE age > 30")
        students_over_30 = self.cursor.fetchall()
        return students_over_30

    def get_python_students(self):
        '''
        Функция вызова студентов, проходящих курс по python
        return: студенты, проходящие курс по python
        '''
        self.cursor.execute("SELECT Students.id, Students.name, Students.surname FROM Students JOIN Student_courses "
                            "ON Students.id = Student_courses.student_id "
                            "JOIN Courses ON Student_courses.course_id = Courses.id "
                            "WHERE Courses.name = 'python'")
        python_students = self.cursor.fetchall()
        return python_students

    def get_python_spb_students(self):
        '''
        Функция вызова студентов, проходящих курс по python и из спб
        return: студенты, проходящие курс по python и из спб
        '''
        self.cursor.execute("SELECT Students.id, Students.name, Students.surname FROM Students JOIN Student_courses "
                            "ON Students.id = Student_courses.student_id "
                            "JOIN Courses ON Student_courses.course_id = Courses.id "
                            "WHERE Courses.name = 'python' AND Students.city = 'Spb'")
        python_spb_students = self.cursor.fetchall()
        return python_spb_students

    def execute_query(self, query):
        '''
        Выполнение запроса
        return: версия базы данных
        '''
        self.cursor.execute(query)
        result = self.cursor.fetchall()
        return result

'''
Создание объекта класса Database и подключение к базе данных,
создание таблиц и добавление данных
'''
db = Database('mydatabase.db')
db.connect()
db.create_tables()
db.insert_data()

'''
Создание запросов
'''
students_over_30 = db.get_students_over_30()
print("Студенты старше 30 лет:")
for student in students_over_30:
    print(student)

python_students = db.get_python_students()
print("Студенты, проходящие курс по python:")
for student in python_students:
    print(student)

python_students = db.get_python_spb_students()
print("Студенты, проходящие курс по python и из Spb:")
for student in python_spb_students:
    print(student)